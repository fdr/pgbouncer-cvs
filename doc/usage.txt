= pgbouncer(1) =

== NAME ==

pgbouncer - Lightweight connection pooler for PostgreSQL.

== SYNOPSIS ==

  pgbouncer [-d][-R][-v][-u user] <pgbouncer.ini>
  pgbouncer -V|-h

== DESCRIPTION ==

+pgbouncer+ is a PostgreSQL connection pooler. Any target application
can be connected to +pgbouncer+ as if it were a PostgreSQL server,
and +pgbouncer+ will manage to connect to the server, or to
reuse one of its existing connections.

The aim of +pgbouncer+ is to lower the performance impact of opening
new connections to PostgreSQL.

In order not to compromise transaction semantics for connection
pooling, +pgbouncer+ supports several levels of brutality when
rotating connections:

Session pooling::
  Most polite method. When client connects, a server connection will
  be assigned to it for the whole duration it stays connected. When
  client disconnects, the server connection will be put back into pool.

Transaction pooling::
  Server connection is assigned to client only during a transaction.
  When PgBouncer notices that transaction is over, the server will
  be put back into pool.

Statement pooling::
  Most aggressive method. The server connection will be put back into
  pool immidiately after a query completes. Multi-statement
  transactions are disallowed in this mode as they would break.

The administration interface of +pgbouncer+ consists of some new
+SHOW+ commands available when connected to a special 'virtual'
database +pgbouncer+.

== QUICK-START ==

Basic setup and usage as following.

 1. Create config file.  Details in +pgbouncer(5)+.  Simplest:

    [databases]
    template1 = host=127.0.0.1 port=5432 dbname=template1
    
    [pgbouncer]
    listen_port = 6543
    listen_addr = 127.0.0.1
    auth_type = md5
    auth_file = users.txt
    logfile = pgbouncer.log
    pidfile = pgbouncer.pid
    admin_users = someuser
 
 2. Create users.txt file:

    "someuser" "same_password_as_in_server"

 3. Launch +pgbouncer+:

     $ pgbouncer -d pgbouncer.ini

 4. have your application (or the +psql+ client) connect to
    +pgbouncer+ instead of directly to PostgreSQL server.

    $ psql -h 127.0.0.1 -p 6543 -U someuser template1

 5. manage +pgbouncer+ by connecting to special administration
    database +pgbouncer+ and issue +show help;+ to begin:

      $ psql -h 127.0.0.1 -p 6543 -U someuser pgbouncer
      pgbouncer=# show help;
      NOTICE:  Console usage
      DETAIL:
        SHOW [HELP|CONFIG|DATABASES|FDS|POOLS|CLIENTS|SERVERS|SOCKETS|LISTS|VERSION]
        SET key = arg
        RELOAD
        PAUSE
        SUSPEND
        RESUME
        SHUTDOWN

  6. If you change some changeable configuration settings in the
     configuration file, you can reload the file with:

      pgbouncer=# RELOAD;

== COMMAND LINE SWITCHES ==

-d::
      Run in background. Without it the process will run in foreground.

-R::
      Do a online restart. That means connecting to running process, loading
      open sockets from it and using them.

-u::
      Switch to user on startup.

-v::
      Increase verbosity.  Can be used multiple time.

-q::
      Be quiet - don't log to stdout.

-V::
      Show version.

-h::
      Show short help.


== ADMIN CONSOLE ==

Console is available by connecting into standard listen_addr/listen_port
and specifying string +pgbouncer+ as database.

  $ psql -h 127.0.0.1 -p 6543 pgbouncer

Only users listed in configuration parameters +admin_users+ or +stats_users+
are allowed to login to the console.

Additionally, username +pgbouncer+ is allowed to log in without password,
if the login comes via UNIX socket and the client has same UNIX user uid
as the running process.

=== SHOW COMMANDS ===

The +SHOW+ commands output some rows, the columns contained are
described here.

==== SHOW STATS; ====

Shows statistics.

database::
  Statistics are presented per database.

total_requests::
  Total number of +SQL+ requests pooled by +pgbouncer+.

total_received::
  Total volume in bytes of network traffic received by +pgbouncer+.

total_sent::
  Total volume in bytes of network traffic sent by +pgbouncer+.

total_query_time::
  Total number of milliseconds spent by +pgbouncer+ when actively
  connected to PostgreSQL.

avg_req::
  Average requests per second in last stat period.

avg_recv::
  Average received (from clients) bytes per second.

avg_sent::
  Average sent (to clients) bytes per second.

avg_query::
  Average query duration in milliseconds.

==== SHOW SERVERS; ====

type::
  S, for server.

user::
  Username +pgbouncer+ uses to connect to server.

database::
  database name on server.

state::
  State of the pgbouncer server connection, one of +active+, +used+ or
  +idle+.

addr::
  IP address of PostgreSQL server.

port::
  Port of PostgreSQL server.

local_addr::
  Connection start address on local machine.

local_port::
  Connection start port on local machine.

connect_time::
  When the connection was made.

request_time::
  When last request was issued.

ptr::
  Address of internal object for this connection.
  Used as unique ID.

link::
  Address of client connection the server is paired with.

==== SHOW CLIENTS; ====

type::
  C, for client.

user::
  Client connected user.

database::
  database name.

state::
  State of the client connection, one of +active+, +used+, +waiting+
  or +idle+.

addr::
  IP address of client.

port::
  port client is connected to.

local_addr::
  Connection end address on local machine.

local_port::
  Connection end port on local machine.

connect_time::
  Timestamp of later client connection.

request_time::
  Timestamp of later client request.

ptr::
  Address of internal object for this connection.
  Used as unique ID.

link::
  Address of server connection the client is paired with.

==== SHOW POOLS; ====

A new pool entry is made for each couple of (database, user).

database::
  database name.

user::
  username.

cl_active::
  Count of currently +active+ client connections.

cl_waiting::
  Count of currently +waiting+ client connections.

sv_active::
  Count of currently +active+ server connections.

sv_idle::
  Count of currently +idle+ server connections.

sv_used::
  Count of currently +used+ server connections.

sv_tested::
  Count of currently +tested+ server connections.

sv_login::
  Count of server connections currently +login+ to PostgreSQL.

maxwait::
  How long has first (oldest) client in queue waited, in second.
  If this start increasing, then current pool of servers does
  not handle requests quick enough.  Reason may be either overloaded
  server or just too small pool_size.


==== SHOW LISTS; ====

Show following internal information, in columns (not rows):

databases::
  Count of databases.

users::
  Count of users.

pools::
  Count of pools.

free_clients::
  Count of free clients.

used_clients::
  Count of used clients.

login_clients::
  Count of clients in +login+ state.

free_servers::
  Count of free servers.

used_servers::
  Count of used servers.

==== SHOW USERS; ====

Show one line per user, under the +name+ column name.

==== SHOW DATABASES; ====

name::
  name of configured database entry.

host::
  Host pgbouncer connects to.

port::
  Port pgbouncer connects to.

database::
  Actual database name pgbouncer connects to.

force_user::
  When user is part of the connection string, the connection between
  pgbouncer and PostgreSQL is forced to the given user, whatever the
  client user.

pool_size::
  Maximum number of server connections.

==== SHOW FDS; ====

Shows list of fds in use. When the connected user has username
"pgbouncer", connects thru unix socket and has same UID as running
process, the actual fds are passed over connection. This mechanism is
used to do online restart.

fd::
  File descriptor numeric value.

task::
  One of +pooler+, +client+ or +server+.

user::
  User of the connection using the FD.

database::
  database of the connection using the FD.

addr::
  IP address of the connection using the FD, +unix+ if a unix socket
  is used.

port::
  port used by the connection using the FD.

cancel::
  cancel key for this connection.

link::
  fd for corresponding server/client.  NULL if idle.

==== SHOW CONFIG; ====

Show the current configuration settings, one per row, with following
columns:

key::
  configuration variable name

value::
  configures value

changeable::
  Either +yes+ or +no+, shows if the variable is changeable when running.
  If +no+, the variable can be changed only boot-time.

=== PROCESS CONTROLLING COMMANDS ===

==== PAUSE; ====

PgBouncer tries to disconnect from all servers, first waiting for all queries
to complete. The command will not return before all is done.

==== SUSPEND; ====

All socket buffers are flushed and PgBouncer stops listening data on them. The
command will not return before all is done.

==== RESUME; ====

Resume work from previous +PAUSE+ or +SUSPEND+ command.

==== SHUTDOWN; ====

The PgBouncer process will exit.

==== RELOAD; ====

The PgBouncer process will reload its configuration file and update
changeable settings.

=== SIGNALS ===

SIGHUP::
  Reload config. Same as issuing command +RELOAD;+ on console.

SIGINT::
  Safe shutdown. Same as issuing +PAUSE;+ and +SHUTDOWN;+ on console.

SIGTERM::
  Immediate shutdown.  Same as issuing +SHUTDOWN;+ on console.

=== LIBEVENT SETTINGS ===

From libevent docs:

  It is possible to disable support for epoll, kqueue, devpoll, poll
  or select by setting the environment variable EVENT_NOEPOLL,
  EVENT_NOKQUEUE, EVENT_NODEVPOLL, EVENT_NOPOLL or EVENT_NOSELECT,
  respectively.

  By setting the environment variable EVENT_SHOW_METHOD, libevent
  displays the kernel notification method that it uses.

=== AUTHENTICATION FILE FORMAT ===

PgBouncer needs its own user database. The users are loaded from text
file that should be in same format as PostgreSQL's +pg_auth/pg_pwd+
file.

  "username1" "password" ... 
  "username2" "md12342345234" ...

There shoud be at least 2 fields, surrounded by double quotes. First
is username and second either plain-text or md5-hashed
password. PgBouncer ignores rest of the line.

Such file format allows to direct PgBouncer directly to PostgreSQL
user file under data directory.

== SEE ALSO ==

pgbouncer(5) - configuration settings descriptions.

https://developer.skype.com/SkypeGarage/DbProjects/PgBouncer[]
